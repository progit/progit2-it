=== Flussi di lavoro distribuito

((( flussi di lavoro)))
A differenza di sistemi di controllo della versione centralizzata (CVCS), la natura distribuita del Git permette di essere molto più flessibili nel modo in cui gli sviluppatori di collaborare su progetti. 
Nei sistemi centralizzati, ogni sviluppatore è un nodo di lavoro più o meno equamente su un hub centrale.
In Git, tuttavia, ogni sviluppatore è potenzialmente sia un nodo che un hub –  cioè, ogni sviluppatore può sia contribuire con il codice ad altri repository e mantengono un archivio pubblico su cui gli altri possono basare il loro lavoro e che possono contribuire a.
Questo apre una vasta gamma di possibilità di flusso di lavoro per il tuo progetto e / o il tuo team, quindi, copriremo alcuni paradigmi comuni che sfruttano questa flessibilità.
Andremo oltre i punti di forza e le possibili debolezze di ogni progetto; puoi scegliere una singola da usare oppure puoi combinare le funzionalità di ciascuna di esse.

==== Flusso di lavoro centralizzato

(((flussi di lavoro, centralizzati)))
Nei sistemi centralizzati, esiste generalmente un singolo modello di collaborazione: il flusso di lavoro centralizzato.
Un hub centrale, o repository, può accettare il codice e tutti sincronizzano il proprio lavoro con esso.
Un certo numero di sviluppatori sono nodi  – i consumatori di quel hub – e sincronizzare con quell'unico posto.

Flusso di lavoro centralizzato
immagine::images/centralized.png [Flusso di lavoro centralizzato.]

Ciò significa che se due sviluppatori clonano dall'hub ed entrambi apportano modifiche, il primo sviluppatore a spingere indietro le modifiche può farlo senza problemi. 
Secondo sviluppatore deve fondersi nel primo di una sola opera prima di spingere le modifiche, in modo da non sovrascrivere le modifiche il primo sviluppatore.
Questo concetto, è vero in Git come in sovversione (((Subversion))) (o in qualsiasi CVCS), e questo modello funziona perfettamente in Git.

Se sei già confortevole con un flusso di lavoro centralizzato nella vostra azienda o di squadra, si può facilmente continuare a utilizzare il flusso di lavoro con Git.
È sufficiente istituire un unico repository, e dare a tutti l'accesso sul team di spinta; Git non permetterà agli utenti di sovrascriversi l'un l'altro.
Di 'a John e Jessica che entrambi iniziano a lavorare contemporaneamente.
John finisce il suo cambiamento e lo spinge al server.
Quindi Jessica cerca di spingere le sue modifiche, ma il server le rifiuta.
Le viene detto che sta cercando di spingere i cambiamenti non-fast-forward e che lei non sarà in grado di farlo fino a quando lei va a prendere e si fonde.
Questo flusso di lavoro è attraente per molte persone perché è un paradigma con cui molti sono familiari e a proprio agio.

Questo non è limitato alle piccole squadre. Con il modello di branching di Git, è possibile che centinaia di sviluppatori lavorino con successo su un singolo progetto attraverso dozzine di filiali contemporaneamente.

[[_integration_manager]]
==== Flusso di lavoro di İntegrazione Manager

(((Flusso di lavoro di, İntegrazione Manager)))
Perché Git ti consente di avere più repository remoti,è possibile avere un flusso di lavoro in cui ogni sviluppatore ha accesso in scrittura al proprio repository pubblico e accesso in lettura a tutti gli altri.
Questo scenario include spesso un repository canonico che rappresenta il progetto "ufficiale".
Per contribuire a quel progetto, crei il tuo clone pubblico del progetto e apporti le tue modifiche ad esso.
Quindi, è possibile inviare una richiesta al manutentore del progetto principale per inserire le modifiche.
Il manutentore può quindi aggiungere il repository come remoto, verificare le modifiche localmente, unirle al loro ramo e tornare al proprio repository.
Il processo funziona come segue (vedere << wfdiag_b >>):

1. Il responsabile del progetto invia al proprio repository pubblico.
2. Un contributore clona quel repository e apporta le modifiche.
3. Il contributore spinge alla propria copia pubblica.
4. Il contributore invia al manutentore un' e-mail chiedendo loro di apportare modifiche.
5. Il maintainer aggiunge il repository del contributore come remoto e si unisce localmente.
6. Il manutentore spinge le modifiche unite al repository principale.

[[wfdiag_b]]
Flusso di lavoro di İntegrazione Manager
immagine::images/integration-manager.png [Flusso di lavoro di İntegrazione Manager]

(((biforcazione)))
Questo è un flusso di lavoro molto comune con strumenti basati su hub come GitHub o GitLab, in cui è facile dare un fork di un progetto e inserire le tue modifiche nella tua forcella affinché tutti possano vederle.
Uno dei principali vantaggi di questo approccio è che puoi continuare a lavorare, e il manutentore del repository principale può inserire le tue modifiche in qualsiasi momento. 
I contributori non devono aspettare che il progetto incorpori le loro modifiche - ogni parte può lavorare al proprio ritmo.

==== Dittatore e tenente Flusso di lavoro

(((flussi di lavoro, dittatore e tenenti)))
Questa è una variante di un flusso di lavoro con più repository.
Generalmente viene utilizzato da enormi progetti con centinaia di collaboratori; un famoso esempio è il kernel di Linux.
Diversi responsabili dell'integrazione sono responsabili di alcune parti del repository; si chiamano tenenti.
Tutti i tenenti hanno un responsabile dell'integrazione noto come dittatore benevolo.
Il repository del dittatore benevolo funge da repository di riferimento da cui tutti i collaboratori hanno bisogno di tirare.
Il processo funziona così (vedere << wfdiag_c >>):

1. Gli sviluppatori regolari lavorano sul loro ramo dell'argomento e rebase il loro lavoro su `master`. 
         Il ramo `master` è quello del dittatore.
2. I Luogotenenti fondono i rami degli argomenti degli sviluppatori nel loro ramo "master".
3. Il dittatore fonde i rami "master" dei luogotenenti nel ramo "master" del dittatore.
4. Il dittatore spinge il proprio `master` al repository di riferimento in modo che gli altri sviluppatori possano rebase su di esso.

[[wfdiag_c]]
Flusso di lavoro del dittatore benevolo.
Immagine::images/benevolent-dictator.png [Flusso di lavoro del dittatore benevolo.]

Questo tipo di flusso di lavoro non è comune, ma può essere utile in progetti molto grandi o in ambienti altamente gerarchici.
Permette al capo del progetto (il dittatore) di delegare gran parte del lavoro e raccogliere ampi sottoinsiemi di codice in più punti prima di integrarli.

==== Riepilogo dei flussi di lavoro

Questi sono alcuni flussi di lavoro comunemente usati che sono possibili con un sistema distribuito come Git, ma puoi vedere che molte variazioni sono possibili per adattarsi al tuo particolare flusso di lavoro nel mondo reale.
Ora che puoi (si spera) determinare quale combinazione del flusso di lavoro può funzionare per te, vedremo alcuni esempi più specifici su come realizzare i ruoli principali che compongono i diversi flussi.
Nella prossima sezione, imparerai alcuni modelli comuni per contribuire a un progetto.
